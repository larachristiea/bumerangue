import os
import json
import xml.etree.ElementTree as ET

# Diret√≥rios e arquivos - CORRIGIDO PARA 2022
DIR_XMLS = "/Users/mcplara/Desktop/MOTOR NOTAS ORGANIZADAS/data/xmls/2022-12"
ESPELHO_NCM_MONOFASICA = "/Users/mcplara/Desktop/MOTOR NOTAS ORGANIZADAS/data/tabelas/Espelho de ncms monof√°sicas.json"
PGDAS_FILE = "/Users/mcplara/Desktop/MOTOR NOTAS ORGANIZADAS/data/pgdas/2022-12.json"  # Ser√° simulado
ANEXO_SIMPLES_FILE = "/Users/mcplara/Desktop/MOTOR NOTAS ORGANIZADAS/data/tabelas/Anexo do Simples.json"

def carregar_espelho_ncm_monofasica():
    """
    Carrega a lista de NCMs monof√°sicos do arquivo espelho JSON.
    Retorna um set com os NCMs para busca r√°pida.
    """
    try:
        with open(ESPELHO_NCM_MONOFASICA, 'r', encoding='utf-8') as arquivo:
            dados = json.load(arquivo)
            ncms_monofasicos = set()
            for item in dados:
                if item and "NCMs monof√°sicos" in item:
                    ncm = str(item["NCMs monof√°sicos"])
                    ncms_monofasicos.add(ncm)
            return ncms_monofasicos
    except FileNotFoundError:
        print(f"‚ö†Ô∏è ERRO: Arquivo {ESPELHO_NCM_MONOFASICA} n√£o encontrado!")
        return set()
    except Exception as e:
        print(f"‚ö†Ô∏è ERRO ao carregar espelho de NCM: {str(e)}")
        return set()

def carregar_dados_pgdas():
    """
    Carrega os dados do PGDAS para o per√≠odo.
    """
    try:
        with open(PGDAS_FILE, 'r', encoding='utf-8') as arquivo:
            return json.load(arquivo)
    except Exception as e:
        print(f"‚ö†Ô∏è ERRO ao carregar PGDAS: {str(e)}")
        return None

def carregar_anexo_simples():
    """
    Carrega a tabela do Anexo do Simples Nacional.
    """
    try:
        with open(ANEXO_SIMPLES_FILE, 'r', encoding='utf-8') as arquivo:
            return json.load(arquivo)
    except Exception as e:
        print(f"‚ö†Ô∏è ERRO ao carregar Anexo do Simples: {str(e)}")
        return None

def identificar_faixa_tributacao(rbt12, anexo_simples_data):
    """
    Identifica a faixa de tributa√ß√£o baseada na RBT12.
    Retorna a al√≠quota nominal e valor dedu√ß√£o da faixa correspondente.
    """
    if not anexo_simples_data or "anexo_1" not in anexo_simples_data:
        print("‚ö†Ô∏è ERRO: Dados do Anexo I n√£o encontrados")
        return None, None, None
    
    faixas = anexo_simples_data["anexo_1"]
    
    for faixa in faixas:
        limite_inicial = faixa.get("receita_bruta_anual_minima", 0)
        limite_final = faixa.get("receita_bruta_anual_maxima", float('inf'))
        
        if limite_inicial <= rbt12 <= limite_final:
            faixa_numero = faixa.get("faixa", "N/A")
            aliquota_nominal = faixa.get("aliquota", 0) / 100  # Converte para decimal
            valor_deducao = faixa.get("valor_a_deduzir", 0)
            
            print(f"üéØ Faixa identificada: {faixa_numero}")
            print(f"   RBT12: R$ {rbt12:,.2f}")
            print(f"   Limite: R$ {limite_inicial:,.2f} a R$ {limite_final:,.2f}")
            print(f"   Al√≠quota Nominal: {aliquota_nominal*100:.2f}%")
            print(f"   Valor Dedu√ß√£o: R$ {valor_deducao:,.2f}")
            
            return faixa_numero, aliquota_nominal, valor_deducao
    
    print(f"‚ö†Ô∏è ERRO: Faixa n√£o encontrada para RBT12 = R$ {rbt12:,.2f}")
    return None, None, None

def calcular_aliquota_apurada(rbt12, anexo_simples_data):
    """
    INSTRU√á√ÉO OBRIGAT√ìRIA PARA TODOS OS MESES:
    
    A AL√çQUOTA APURADA DEVE ser sempre calculada usando a f√≥rmula oficial do Simples Nacional:
    
    AL√çQUOTA APURADA = (RBT12 √ó AL√çQUOTA NOMINAL - VALOR DEDU√á√ÉO) / RBT12
    
    ONDE:
    - RBT12 = Receita Bruta dos 12 meses anteriores (do PGDAS)
    - AL√çQUOTA NOMINAL = Al√≠quota da faixa correspondente (Anexo I do Simples)
    - VALOR DEDU√á√ÉO = Valor a deduzir da faixa correspondente (Anexo I do Simples)
    
    REGRAS OBRIGAT√ìRIAS:
    1. NUNCA usar valores de "aliquota_efetiva" dos arquivos JSON
    2. SEMPRE calcular a AL√çQUOTA APURADA usando a f√≥rmula acima
    3. Buscar al√≠quota nominal e dedu√ß√£o na tabela do Anexo I conforme RBT12
    4. Aplicar esta AL√çQUOTA APURADA nos tributos de produtos n√£o-monof√°sicos
    5. Para produtos monof√°sicos: PIS = 0, COFINS = 0 (independente da al√≠quota)
    
    TERMINOLOGIA: Use "AL√çQUOTA APURADA" em todos os relat√≥rios para distinguir do valor pr√©-calculado.
    """
    
    # ‚úÖ BUSCAR DINAMICAMENTE na tabela do Anexo do Simples
    faixa, aliquota_nominal, valor_deducao = identificar_faixa_tributacao(rbt12, anexo_simples_data)
    
    if aliquota_nominal is None or valor_deducao is None:
        print("‚ùå ERRO: N√£o foi poss√≠vel identificar faixa de tributa√ß√£o")
        return None, None, None
    
    # ‚úÖ APLICAR A F√ìRMULA OFICIAL
    aliquota_apurada = ((rbt12 * aliquota_nominal) - valor_deducao) / rbt12
    
    print(f"üìê C√ÅLCULO DA AL√çQUOTA APURADA:")
    print(f"   F√≥rmula: (RBT12 √ó Al√≠quota Nominal - Valor Dedu√ß√£o) / RBT12")
    print(f"   C√°lculo: (R$ {rbt12:,.2f} √ó {aliquota_nominal*100:.2f}% - R$ {valor_deducao:,.2f}) / R$ {rbt12:,.2f}")
    print(f"   Resultado: {aliquota_apurada*100:.4f}%")
    
    return aliquota_apurada, aliquota_nominal, valor_deducao

def obter_proporcoes_tributos(anexo_simples_data, faixa_numero):
    """
    Obt√©m as propor√ß√µes de PIS e COFINS da segunda tabela do Anexo do Simples.
    
    REGRA IMPORTANTE:
    As propor√ß√µes s√£o aplicadas SOBRE A AL√çQUOTA APURADA, n√£o sobre a receita.
    
    Exemplo: Se AL√çQUOTA APURADA = 8,05% e empresa na 4¬™ faixa:
    - PIS = 2,76% da al√≠quota apurada = 8,05% √ó 2,76% = 0,22%
    - COFINS = 12,74% da al√≠quota apurada = 8,05% √ó 12,74% = 1,03%
    """
    if not anexo_simples_data or "proporcoes_anexo_1" not in anexo_simples_data:
        print("‚ö†Ô∏è Propor√ß√µes n√£o encontradas no Anexo, usando do PGDAS")
        return None, None
    
    proporcoes = anexo_simples_data["proporcoes_anexo_1"]
    
    for item in proporcoes:
        if item.get("faixa") == faixa_numero:
            pis_prop = item.get("pis", 0) / 100  # Converte para decimal
            cofins_prop = item.get("cofins", 0) / 100  # Converte para decimal
            
            print(f"üìä Propor√ß√µes da Faixa {faixa_numero} (aplicadas sobre a Al√≠quota Apurada):")
            print(f"   PIS: {pis_prop*100:.2f}% da al√≠quota apurada")
            print(f"   COFINS: {cofins_prop*100:.2f}% da al√≠quota apurada")
            
            return pis_prop, cofins_prop
    
    print(f"‚ö†Ô∏è Propor√ß√µes n√£o encontradas para faixa {faixa_numero}")
    return None, None

def classificar_produtos_por_ncm():
    """
    Classifica produtos como monof√°sicos ou n√£o-monof√°sicos baseado no NCM
    seguindo rigorosamente a metodologia F√≥rmula V12.
    """
    # Carregar dados necess√°rios
    ncms_monofasicos = carregar_espelho_ncm_monofasica()
    pgdas_data = carregar_dados_pgdas()
    anexo_simples_data = carregar_anexo_simples()
    
    print(f"üìã Carregados {len(ncms_monofasicos)} NCMs monof√°sicos do espelho")
    
    if not pgdas_data:
        print("‚ùå N√£o foi poss√≠vel carregar dados do PGDAS")
        return None
    
    if not anexo_simples_data:
        print("‚ùå N√£o foi poss√≠vel carregar dados do Anexo do Simples")
        return None
    
    # Dados do PGDAS
    rbt12 = pgdas_data.get("receita_bruta_acumulada", 0)
    tributos_pgdas = pgdas_data.get("tributos", {})
    
    # ‚úÖ CALCULAR AL√çQUOTA APURADA DINAMICAMENTE
    resultado_aliquota = calcular_aliquota_apurada(rbt12, anexo_simples_data)
    if resultado_aliquota[0] is None:
        return None
    
    aliquota_apurada, aliquota_nominal, valor_deducao = resultado_aliquota
    
    # Identificar faixa para buscar propor√ß√µes
    faixa_numero, _, _ = identificar_faixa_tributacao(rbt12, anexo_simples_data)
    
    # ‚úÖ BUSCAR PROPOR√á√ïES DO ANEXO DO SIMPLES
    pis_prop, cofins_prop = obter_proporcoes_tributos(anexo_simples_data, faixa_numero)
    
    # Se n√£o encontrar no Anexo, usar do PGDAS como fallback
    if pis_prop is None or cofins_prop is None:
        proporcoes_pgdas = pgdas_data.get("proporcoes", {})
        pis_prop = proporcoes_pgdas.get("pis", 0.0136)  # 1,36% padr√£o
        cofins_prop = proporcoes_pgdas.get("cofins", 0.0629)  # 6,29% padr√£o
        print(f"üìä Usando propor√ß√µes do PGDAS: PIS {pis_prop*100:.2f}%, COFINS {cofins_prop*100:.2f}%")
    
    print(f"üí° AL√çQUOTA APURADA CALCULADA: {aliquota_apurada*100:.4f}%")
    print(f"   (RBT12: R$ {rbt12:,.2f} √ó {aliquota_nominal*100}% - R$ {valor_deducao:,.2f}) / R$ {rbt12:,.2f}")
    
    # Contadores
    total_itens = 0
    itens_monofasicos = 0
    itens_nao_monofasicos = 0
    
    # Listas para armazenar exemplos
    exemplos_monofasicos = []
    exemplos_nao_monofasicos = []
    
    # Totais de receita
    rvm_total = 0  # Receita de produtos monof√°sicos
    rvn_total = 0  # Receita de produtos n√£o-monof√°sicos
    rbv_total = 0  # Receita bruta de vendas (com desconto)
    rbd_total = 0  # Receita bruta sem desconto
    
    print("üîç Processando XMLs...")
    
    for arquivo in os.listdir(DIR_XMLS):
        if not arquivo.endswith('.xml'):
            continue
            
        caminho_completo = os.path.join(DIR_XMLS, arquivo)
        
        try:
            # Analisar XML
            tree = ET.parse(caminho_completo)
            root = tree.getroot()
            
            # Encontrar o elemento NFe (pode estar dentro de nfeProc)
            nfe = root
            if root.tag.endswith('nfeProc'):
                for child in root:
                    if child.tag.endswith('NFe'):
                        nfe = child
                        break
                        
            # Namespace para pesquisa de elementos
            ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}
            
            # Encontrar infNFe
            info_nfe = nfe.find('.//nfe:infNFe', ns)
            if info_nfe is None:
                continue
            
            # Valor total da NF (j√° considera descontos)
            total_elem = info_nfe.find('.//nfe:total/nfe:ICMSTot/nfe:vNF', ns)
            if total_elem is not None:
                rbv_total += float(total_elem.text)
                
            # Processar itens
            for det in info_nfe.findall('.//nfe:det', ns):
                prod = det.find('.//nfe:prod', ns)
                if prod is None:
                    continue
                    
                # Extrair dados do produto
                ncm = prod.find('.//nfe:NCM', ns)
                ncm_text = ncm.text if ncm is not None else ""
                
                descricao_elem = prod.find('.//nfe:xProd', ns)
                descricao = descricao_elem.text if descricao_elem is not None else ""
                
                vprod_elem = prod.find('.//nfe:vProd', ns)
                vprod = float(vprod_elem.text) if vprod_elem is not None else 0
                
                vdesc_elem = prod.find('.//nfe:vDesc', ns)
                vdesc = float(vdesc_elem.text) if vdesc_elem is not None else 0
                
                # Valor l√≠quido do item (vProd - vDesc)
                valor_liquido = vprod - vdesc
                
                # Atualizar totais
                total_itens += 1
                rbd_total += vprod
                
                # üîç CLASSIFICA√á√ÉO SEGUNDO F√ìRMULA V12:
                # Crit√©rio: Compare NCM com "Espelho de NCM monof√°sica"
                is_monofasico = ncm_text in ncms_monofasicos
                
                if is_monofasico:
                    # Produto MONOF√ÅSICO
                    itens_monofasicos += 1
                    rvm_total += valor_liquido
                    
                    if len(exemplos_monofasicos) < 5:
                        exemplos_monofasicos.append({
                            "ncm": ncm_text,
                            "descricao": descricao,
                            "vprod": vprod,
                            "vdesc": vdesc,
                            "valor_liquido": valor_liquido,
                            "arquivo": arquivo,
                            "classificacao": "MONOF√ÅSICO (NCM no espelho)"
                        })
                else:
                    # Produto N√ÉO-MONOF√ÅSICO
                    itens_nao_monofasicos += 1
                    rvn_total += valor_liquido
                    
                    if len(exemplos_nao_monofasicos) < 5:
                        exemplos_nao_monofasicos.append({
                            "ncm": ncm_text,
                            "descricao": descricao,
                            "vprod": vprod,
                            "vdesc": vdesc,
                            "valor_liquido": valor_liquido,
                            "arquivo": arquivo,
                            "classificacao": "N√ÉO-MONOF√ÅSICO (NCM n√£o consta no espelho)"
                        })
        
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao processar {arquivo}: {str(e)}")
            continue
    
    # üí∞ C√ÅLCULO DOS TRIBUTOS CONFORME V12
    print("\nüí∞ CALCULANDO TRIBUTOS...")
    print(f"üìã METODOLOGIA:")
    print(f"   ‚Ä¢ Monof√°sicos: PIS = 0, COFINS = 0")
    print(f"   ‚Ä¢ N√£o-Monof√°sicos: Receita √ó Al√≠quota Apurada √ó Propor√ß√£o")
    print(f"   ‚Ä¢ Propor√ß√µes aplicadas SOBRE a Al√≠quota Apurada")
    
    # Para produtos MONOF√ÅSICOS: PIS = 0, COFINS = 0
    pis_monofasicos = 0.0
    cofins_monofasicos = 0.0
    
    # Para produtos N√ÉO-MONOF√ÅSICOS: 
    # F√≥rmula: RVN √ó (AL√çQUOTA APURADA √ó PROPOR√á√ÉO)
    # Exemplo: RVN √ó (8,05% √ó 2,76%) para PIS
    aliquota_pis_efetiva = aliquota_apurada * pis_prop
    aliquota_cofins_efetiva = aliquota_apurada * cofins_prop
    
    pis_nao_monofasicos = rvn_total * aliquota_pis_efetiva
    cofins_nao_monofasicos = rvn_total * aliquota_cofins_efetiva
    
    print(f"\nüßÆ C√ÅLCULO DETALHADO:")
    print(f"   Al√≠quota Apurada: {aliquota_apurada*100:.4f}%")
    print(f"   Propor√ß√£o PIS: {pis_prop*100:.2f}% ‚Üí Al√≠quota PIS Efetiva: {aliquota_pis_efetiva*100:.4f}%")
    print(f"   Propor√ß√£o COFINS: {cofins_prop*100:.2f}% ‚Üí Al√≠quota COFINS Efetiva: {aliquota_cofins_efetiva*100:.4f}%")
    print(f"   RVN (N√£o-Monof√°sicos): R$ {rvn_total:,.2f}")
    print(f"   PIS = R$ {rvn_total:,.2f} √ó {aliquota_pis_efetiva*100:.4f}% = R$ {pis_nao_monofasicos:.2f}")
    print(f"   COFINS = R$ {rvn_total:,.2f} √ó {aliquota_cofins_efetiva*100:.4f}% = R$ {cofins_nao_monofasicos:.2f}")
    
    # Total apurado
    pis_apurado = pis_monofasicos + pis_nao_monofasicos
    cofins_apurado = cofins_monofasicos + cofins_nao_monofasicos
    
    # Cr√©dito tribut√°rio = Declarado - Apurado
    credito_pis = tributos_pgdas.get("pis", 0) - pis_apurado
    credito_cofins = tributos_pgdas.get("cofins", 0) - cofins_apurado
    credito_total = credito_pis + credito_cofins
    
    return {
        "pgdas": pgdas_data,
        "anexo_simples": anexo_simples_data,
        "faixa_tributacao": faixa_numero,
        "aliquota_apurada": aliquota_apurada,
        "aliquota_nominal": aliquota_nominal,
        "valor_deducao": valor_deducao,
        "proporcoes": {
            "pis": pis_prop,
            "cofins": cofins_prop,
            "aliquota_pis_efetiva": aliquota_pis_efetiva,
            "aliquota_cofins_efetiva": aliquota_cofins_efetiva
        },
        "totais": {
            "total_itens": total_itens,
            "itens_monofasicos": itens_monofasicos,
            "itens_nao_monofasicos": itens_nao_monofasicos,
            "rvm_total": rvm_total,
            "rvn_total": rvn_total,
            "rbv_total": rbv_total,
            "rbd_total": rbd_total
        },
        "tributos": {
            "pis_monofasicos": pis_monofasicos,
            "cofins_monofasicos": cofins_monofasicos,
            "pis_nao_monofasicos": pis_nao_monofasicos,
            "cofins_nao_monofasicos": cofins_nao_monofasicos,
            "pis_apurado": pis_apurado,
            "cofins_apurado": cofins_apurado,
            "credito_pis": credito_pis,
            "credito_cofins": credito_cofins,
            "credito_total": credito_total
        },
        "exemplos_monofasicos": exemplos_monofasicos,
        "exemplos_nao_monofasicos": exemplos_nao_monofasicos
    }

def main():
    print("=" * 80)
    print("üîß TAXENGINE V12 - CLASSIFICA√á√ÉO E C√ÅLCULO COM AL√çQUOTA APURADA")
    print("üìã Crit√©rio: Compara√ß√£o NCM vs Espelho + C√°lculo Correto de Tributos")
    print("‚úÖ CORRE√á√ÉO: Busca din√¢mica na tabela do Anexo do Simples")
    print("=" * 80)
    
    resultados = classificar_produtos_por_ncm()
    
    if not resultados:
        print("‚ùå N√£o foi poss√≠vel processar os dados")
        return
    
    # Dados do PGDAS
    pgdas = resultados["pgdas"]
    print(f"\nüìä DADOS DO PGDAS:")
    print(f"Per√≠odo: {pgdas.get('periodo')}")
    print(f"CNPJ: {pgdas.get('cnpj')}")
    print(f"RBT12: R$ {pgdas.get('receita_bruta_acumulada', 0):,.2f}")
    print(f"Receita PA: R$ {pgdas.get('receita_bruta_mensal', 0):,.2f}")
    
    # Al√≠quota Apurada
    print(f"\n‚öñÔ∏è AL√çQUOTA APURADA (CALCULADA DINAMICAMENTE):")
    print(f"Faixa de Tributa√ß√£o: {resultados['faixa_tributacao']}")
    print(f"Al√≠quota Nominal: {resultados['aliquota_nominal']*100:.2f}%")
    print(f"Valor Dedu√ß√£o: R$ {resultados['valor_deducao']:,.2f}")
    print(f"AL√çQUOTA APURADA: {resultados['aliquota_apurada']*100:.4f}%")
    print(f"‚ùå Ignorado 'aliquota_efetiva' do JSON: {pgdas.get('aliquota_efetiva', 0)*100:.2f}%")
    
    # Propor√ß√µes utilizadas
    proporcoes = resultados["proporcoes"]
    print(f"\nüìä PROPOR√á√ïES E AL√çQUOTAS EFETIVAS:")
    print(f"Propor√ß√£o PIS: {proporcoes['pis']*100:.2f}% da Al√≠quota Apurada")
    print(f"Propor√ß√£o COFINS: {proporcoes['cofins']*100:.2f}% da Al√≠quota Apurada")
    print(f"‚Üí Al√≠quota PIS Efetiva: {proporcoes['aliquota_pis_efetiva']*100:.4f}%")
    print(f"‚Üí Al√≠quota COFINS Efetiva: {proporcoes['aliquota_cofins_efetiva']*100:.4f}%")
    
    # Resumo dos produtos
    print(f"\nüìä RESUMO DOS PRODUTOS:")
    print("-" * 50)
    totais = resultados["totais"]
    print(f"Total de itens processados: {totais['total_itens']:,}")
    print(f"Itens monof√°sicos: {totais['itens_monofasicos']:,} ({totais['itens_monofasicos']/totais['total_itens']*100:.1f}%)")
    print(f"Itens n√£o-monof√°sicos: {totais['itens_nao_monofasicos']:,} ({totais['itens_nao_monofasicos']/totais['total_itens']*100:.1f}%)")
    
    print(f"\nüí∞ RECEITAS CALCULADAS:")
    print(f"RBV (Receita Bruta de Vendas): R$ {totais['rbv_total']:,.2f}")
    print(f"RBD (Receita sem Descontos): R$ {totais['rbd_total']:,.2f}")
    print(f"RVM (Receita Monof√°sicos): R$ {totais['rvm_total']:,.2f} ({totais['rvm_total']/totais['rbv_total']*100:.1f}%)")
    print(f"RVN (Receita N√£o-Monof√°sicos): R$ {totais['rvn_total']:,.2f} ({totais['rvn_total']/totais['rbv_total']*100:.1f}%)")
    
    # Verifica√ß√£o de consist√™ncia
    print(f"\nüîç VERIFICA√á√ÉO:")
    diferenca = abs((totais['rvm_total'] + totais['rvn_total']) - totais['rbv_total'])
    print(f"RVM + RVN = R$ {(totais['rvm_total'] + totais['rvn_total']):,.2f}")
    print(f"Diferen√ßa com RBV: R$ {diferenca:.2f}")
    
    if diferenca > 1:
        print("‚ö†Ô∏è ATEN√á√ÉO: Diferen√ßa significativa detectada!")
    else:
        print("‚úÖ Valores consistentes")
    
    # C√°lculo dos tributos
    tributos = resultados["tributos"]
    print(f"\nüí∏ C√ÅLCULO DOS TRIBUTOS:")
    print("-" * 50)
    print(f"üìà PIS:")
    print(f"  Declarado (PGDAS): R$ {pgdas.get('tributos', {}).get('pis', 0):.2f}")
    print(f"  Apurado Monof√°sicos: R$ {tributos['pis_monofasicos']:.2f}")
    print(f"  Apurado N√£o-Monof√°sicos: R$ {tributos['pis_nao_monofasicos']:.2f}")
    print(f"  Total Apurado: R$ {tributos['pis_apurado']:.2f}")
    print(f"  üí∞ CR√âDITO PIS: R$ {tributos['credito_pis']:.2f}")
    
    print(f"\nüìà COFINS:")
    print(f"  Declarado (PGDAS): R$ {pgdas.get('tributos', {}).get('cofins', 0):.2f}")
    print(f"  Apurado Monof√°sicos: R$ {tributos['cofins_monofasicos']:.2f}")
    print(f"  Apurado N√£o-Monof√°sicos: R$ {tributos['cofins_nao_monofasicos']:.2f}")
    print(f"  Total Apurado: R$ {tributos['cofins_apurado']:.2f}")
    print(f"  üí∞ CR√âDITO COFINS: R$ {tributos['credito_cofins']:.2f}")
    
    print(f"\nüéØ RESULTADO FINAL:")
    print(f"üí∞ CR√âDITO TOTAL: R$ {tributos['credito_total']:.2f}")
    
    # Exemplos de produtos monof√°sicos
    if resultados["exemplos_monofasicos"]:
        print(f"\nüîµ EXEMPLOS DE PRODUTOS MONOF√ÅSICOS ({len(resultados['exemplos_monofasicos'])}):")
        for i, exemplo in enumerate(resultados["exemplos_monofasicos"], 1):
            print(f"\n{i}. NCM: {exemplo['ncm']}")
            print(f"   Descri√ß√£o: {exemplo['descricao'][:60]}...")
            print(f"   Valor Produto: R$ {exemplo['vprod']:.2f}")
            print(f"   Desconto: R$ {exemplo['vdesc']:.2f}")
            print(f"   Valor L√≠quido: R$ {exemplo['valor_liquido']:.2f}")
            print(f"   Classifica√ß√£o: {exemplo['classificacao']}")
    
    # Exemplos de produtos n√£o-monof√°sicos
    if resultados["exemplos_nao_monofasicos"]:
        print(f"\nüî¥ EXEMPLOS DE PRODUTOS N√ÉO-MONOF√ÅSICOS ({len(resultados['exemplos_nao_monofasicos'])}):")
        for i, exemplo in enumerate(resultados["exemplos_nao_monofasicos"], 1):
            print(f"\n{i}. NCM: {exemplo['ncm']}")
            print(f"   Descri√ß√£o: {exemplo['descricao'][:60]}...")
            print(f"   Valor Produto: R$ {exemplo['vprod']:.2f}")
            print(f"   Desconto: R$ {exemplo['vdesc']:.2f}")
            print(f"   Valor L√≠quido: R$ {exemplo['valor_liquido']:.2f}")
            print(f"   Classifica√ß√£o: {exemplo['classificacao']}")

if __name__ == "__main__":
    main()